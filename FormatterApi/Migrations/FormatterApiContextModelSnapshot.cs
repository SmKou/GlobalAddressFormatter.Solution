// <auto-generated />
using FormatterApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormatterApi.Migrations
{
    [DbContext(typeof(FormatterApiContext))]
    partial class FormatterApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FormatterApi.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryCode = "AUS",
                            CountryName = "Australia"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryCode = "BDG",
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryCode = "CHL",
                            CountryName = "Chile"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryCode = "GRC",
                            CountryName = "Greece"
                        },
                        new
                        {
                            CountryId = 5,
                            CountryCode = "IND",
                            CountryName = "India"
                        },
                        new
                        {
                            CountryId = 6,
                            CountryCode = "USA",
                            CountryName = "United States"
                        });
                });

            modelBuilder.Entity("FormatterApi.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .HasColumnType("longtext");

                    b.HasKey("FieldId");

                    b.ToTable("Fields", (string)null);
                });

            modelBuilder.Entity("FormatterApi.Models.Format", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FormatName")
                        .HasColumnType("longtext");

                    b.Property<string>("FormatPattern")
                        .HasColumnType("longtext");

                    b.HasKey("FormatId");

                    b.HasIndex("CountryId");

                    b.ToTable("Formats", (string)null);
                });

            modelBuilder.Entity("FormatterApi.Models.FormatField", b =>
                {
                    b.Property<int>("FormatFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.HasKey("FormatFieldId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FormatId");

                    b.ToTable("FormatFields", (string)null);
                });

            modelBuilder.Entity("FormatterApi.Models.Format", b =>
                {
                    b.HasOne("FormatterApi.Models.Country", "Country")
                        .WithMany("Formats")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FormatterApi.Models.FormatField", b =>
                {
                    b.HasOne("FormatterApi.Models.Field", "Field")
                        .WithMany("FormatFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatterApi.Models.Format", "Format")
                        .WithMany("FormatFields")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("FormatterApi.Models.Country", b =>
                {
                    b.Navigation("Formats");
                });

            modelBuilder.Entity("FormatterApi.Models.Field", b =>
                {
                    b.Navigation("FormatFields");
                });

            modelBuilder.Entity("FormatterApi.Models.Format", b =>
                {
                    b.Navigation("FormatFields");
                });
#pragma warning restore 612, 618
        }
    }
}
