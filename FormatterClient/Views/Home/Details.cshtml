@{
    Layout = "_Layout";
}
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using FormatterClient.Models
@model AddressFormatter

@functions {
    public string Reformat(string name)
    {
        Regex regex = new Regex(@"[A-Z][a-z]+");
        Match match = regex.Match(name);
        if (match.Success)
        {
            List<string> matches = new List<string>();
            foreach (Group g in match.Groups)
                matches.Add(g.Value);
            return String.Join(" ", matches);
        }
        return name;
    }

    public string[] Pattern(string pattern)
    {
        string[] lines = pattern.Split("\n");
        for (int j = 0; j < lines.Length; j++)
        {
            string[] tokens = lines[j].Split(new char[] { '{', '}' });
            for (int i = 0; i < tokens.Length; i++)
            {
                if (tokens[i].Contains("-number"))
                    tokens[i] = (new Random().Next(1, 100)).ToString();
                else if (tokens[i].Contains("-code"))
                    tokens[i] = (new Random().Next(100, 10000)).ToString();
                if (tokens[i].Contains("-"))
                    tokens[i] = String.Join(" ", tokens[i].Split("-"));

                if (tokens[i].Length != 0 && tokens[i][0].ToString() != " ")
                    tokens[i] = tokens[i][0].ToString().ToUpper() + tokens[i].Substring(1);
            }
            string line = String.Join(" ", tokens);
            lines[j] = line.Replace(" ,", ",");
        }
        return lines;
    }
}

<style>
    form {
        width: 100%;
        margin-top: 1.2rem;
        display: grid;
        grid-template-columns: 12rem 1fr;
        gap: 1rem;
    }

    form input[type=submit] {
        grid-column: span 2;
    }
</style>

<section class="page-title">
    <h3><strong>Country:</strong> @Model.CountryName</h3>
    @Html.ActionLink("Select a different country", "Index")
</section>
<section>
    <details id="select_format" open>
        <summary>Select a format</summary>
        @foreach (Format format in @Model.Formats)
        {
            <div>
                <p><strong>@Reformat(@format.FormatName)</strong></p>
                <ul>
                    <li>@format.Description</li>
                    <li><strong>Format layout:</strong><br>
                        @{string[] lines = @Pattern(@format.Pattern);}
                        @foreach (string line in lines)
                        {
                            <span>@line</span>
                            <br>
                        }
                    </li>
                </ul>
                <p><button id="@format.FormatName">Select this Format</button></p>
            </div>
        }
    </details>
</section>
<section id="format_fields"></section>
<section id="formatted_address"></section>

<script type="text/javascript">
    var model = @Html.Raw(JsonSerializer.Serialize(Model));
    const address_format = {
        pattern: "",
        fields: []
    };
    const select_format = document.getElementById('select_format');
    const buttons = document.querySelectorAll('button');
    const format_fields = document.getElementById('format_fields');
    const formatted_address = document.getElementById('formatted_address');

    buttons.forEach(button => button.addEventListener('click', e => {
        const format_name = e.target.id;
        alert(format_name);
        const formats = model["Formats"];
        select_format.open = false;
        for (let i = 0; i < formats.length; i++)
            if (formats[i]["FormatName"] === format_name)
            {
                address_format.pattern = formats["Pattern"];
                address_format.fields = formats["Fields"];
                break;
            }
        
        format_fields.innerHtml = "";
        const fields_details = document.createElement('details');
        fields_details.open = true;
        const summary = document.createElement('summary');
        summary.appendChild(document.createTextNode("Fill in address fields"));
        fields_details.appendChild(summary);
        const fields_form = document.createElement('form');
        fields_form.id = "fields_form";
        address_format.fields.forEach(field => {
            const label = document.createElement('label');
            label.for = field;
            label.appendChild(document.createTextNode(reformat(field)));
            const input = document.createElement('input');
            input.id = field;
            input.name = field;
            fields_form.appendChild(label);
            fields_form.appendChild(input);
        });
        const submit_btn = document.createElement('input');
        submit_btn.type = "submit";
        submit_btn.value = "Format Address";
        fields_form.appendChild(submit_btn);
        fields_form.addEventListener('submit', e => {
            e.preventDefault();
            alert(e.target.tagName);
        })
        fields_details.appendChild(fields_form);
        format_fields.appendChild(fields_details);
    }));

    function reformat(field) {
        field = field.replace("-", " ");
        return field[0].toUpperCase() + field.substring(1);
    }

    function format(data) {
        const lines = address_format.pattern.split("\n");
        for (let i = 0; i < lines.length; i++)
        {
            const tokens = lines[i].split(/[{}]/);
            const regex = new RegExp('/\w+/');
            for (let j = 0; j < tokens.length; j++)
                if (regex.test(tokens[j]))
                    tokens[j] = data.has(tokens[j]) ? data.get(tokens[j]) : "";
            lines[i] = tokens.join(" ");
        }
        const regex = new RegExp('/[ ]+/');
        for (let i = lines.length - 1; i >= 1; i--)
            if (regex.test(lines[i]))
                lines.splice(i, 1);
        for (let line of lines)
            line.replace(" ,", ",");
        return lines;
    }

    function display(form) {
        FormData data = new FormData(form);
        const address = format(data);
        if (address.length == 0)
            return false;

        formatted_address.innerHTML = "";
        const paragraph = document.createElement('p');
        const strong = document.createElement('strong');
        strong.appendChild(document.createTextNode("Formatted Address:"));
        paragraph.appendChild(strong);
        formatted_address.appendChild(paragraph);
    }
</script>