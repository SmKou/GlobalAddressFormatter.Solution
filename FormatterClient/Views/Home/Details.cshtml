@{
    Layout = "_Layout";
}
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using FormatterClient.Models
@model AddressFormatter

@functions {
    public string Reformat(string name)
    {
        Regex regex = new Regex(@"[A-Z][a-z]+");
        Match match = regex.Match(name);
        if (match.Success)
        {
            List<string> matches = new List<string>();
            foreach (Group g in match.Groups)
                matches.Add(g.Value);
            return String.Join(" ", matches);
        }
        return name;
    }

    public string[] Pattern(string pattern)
    {
        string[] lines = pattern.Split("\n");
        for (int j = 0; j < lines.Length; j++)
        {
            string[] tokens = lines[j].Split(new char[] { '{', '}' });
            for (int i = 0; i < tokens.Length; i++)
            {
                if (tokens[i].Contains("-number"))
                    tokens[i] = (new Random().Next(1, 100)).ToString();
                else if (tokens[i].Contains("-code"))
                    tokens[i] = (new Random().Next(100, 10000)).ToString();
                if (tokens[i].Contains("-"))
                    tokens[i] = String.Join(" ", tokens[i].Split("-"));
                
                if (tokens[i].Length != 0 && tokens[i][0].ToString() != " ")
                    tokens[i] = tokens[i][0].ToString().ToUpper() + tokens[i].Substring(1);
            }
            lines[j] = String.Join(" ", tokens);
        }
        return lines;
    }
}

<section class="page-title">
    <h3><strong>Country:</strong> @Model.CountryName</h3>
    @Html.ActionLink("Select a different country", "Index")
</section>
<section>
    <details id="select_format" open>
        <summary>Select a format</summary>
        @foreach (Format format in @Model.Formats)
        {
            <div>
                <p><strong>@Reformat(@format.FormatName)</strong></p>
                <ul>
                    <li>@format.Description</li>
                    <li><strong>Format layout:</strong><br>
                        @{string[] lines = @Pattern(@format.Pattern);}
                        @foreach (string line in lines)
                        {
                            <span>@line</span>
                            <br>
                        }
                    </li>
                </ul>
                <p><button id="@format.FormatName">Select this Format</button></p>
            </div>
        }
    </details>
</section>
<section id="format_fields"></section>

<script type="text/javascript">
    var model = @Html.Raw(JsonSerializer.Serialize(Model));

    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => button.addEventListener('click', e => {
        const format_name = e.target.id;
        select_format.open = false;
        let format = { };
        for (let i = 0; i < model["Formats"].length; i++)
            if (model["Formats"][i]["FormatName"] === format_name)
            {
                format = { 
                    pattern: model["Formats"][i]["Pattern"],
                    fields: model["Formats"][i]["Fields"]
                };
                break;
            }
        const formatfields = document.getElementById('format_fields');
        const formatfields = document.getElementById('format_fields');
    }));
    
    
    /* selectFormat.addEventListener('click', e => {
        selectFormat.open = false;
        const format_name = e.target.id;
        const format = {
            pattern: model["Formats"][format_name]["Pattern"],
            fields: model["Formats"][format_name]["Fields"]
        };
        const formatFields = document.getElementById("format_fields");
        const form = document.createElement("form");
        for (let field in format.fields)
        {
            const label = document.createElement("label");
            label.for = $"{field}"
            label.append(document.createTextNode(field));
            const input = document.createElement("input");
            input.type = "text";
            input.id = field;
            input.name = field;
            form.appendChild(label);
            form.appendChild(input);
        }
        const submit = document.createElement("submit");
        form.appendChild(submit);
    }) */
</script>